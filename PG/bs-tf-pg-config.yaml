apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: terraform-postgress
  title: Terraform Template for Postgres DB in AWS
  description: Postgress
spec:
  owner: mythun-git
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Enter the resource name
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the resource
          ui:autofocus: true
          ui:options:
            rows: 5
            
    - title: Fill Postgress DB Details
      required:
        - dbIdentifierName
        - databaseName
        - instanceClass
        - storageSize
        - storageType
        - subsetGroupName
        - databaseName
        - dbUserName
        - dbPassword
      properties:
        dbIdentifierName:
          title: Database Identification Name
          type: string
          description: Enter the Database Identification Name
          ui:autofocus: true
          ui:options:
            rows: 5

        instanceClass:
          title: Instance Class
          type: string
          description: Select Instance Class
          enum:
            - db.t3.micro
            - db.t3.large

        storageSize:
          title: Storage Size
          type: number
          description: Enter Storage Size in GB

        storageType:
         title: Storage Type
         type: string
         description: Select storage type
         enum:
           - gp2

        subsetGroupName:
          title: Subset Group Name
          type: string
          description: Enter Subset
          
        engineVersion:
          title: Engine Version
          type: string
          description: Enter Engine Version
          
        publiclyAccessible:
          title: is Publicly Accessible?
          type: string
          description: is Publicly Accessible?
          enum:
            - true
            - false
            
        databaseName:
          title: Database Name
          type: string
          description: Enter the Database Name

        dbUserName:
          title: User Name
          type: string
          description: Enter the Database User Name

        dbPassword:
          title: User Name
          type: string
          format: password
          description: Enter the Database User Name

    - title: Enter Cloud Configuration
      required:
        - vpcId
        - securityGroupId
        - region
      properties:
        vpcId:
          title: VPC Id
          type: string
          description: Enter VPC Id

        securityGroupId:
          title: Security Group Id
          type: string
          description: Enter Security Group Id

        region:
          title: AWS Region
          type: string
          description: The AWS region where the Postgress db will be deployed to
          enum:
            - us-east-1
            - us-east-2
            - us-west-1
            - us-west-2

        env:
          title: Environment
          type: string
          description: Environment
          enum:
            - development
            - qa
            - production

    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          region: ${{ parameters.region }}
          dbIdentifierName: ${{ parameters.dbIdentifierName }}
          databaseName: ${{ parameters.databaseName }}
          dbUserName: ${{ parameters.dbUserName }}
          dbPassword: ${{ parameters.dbPassword }}
          vpcId: ${{ parameters.vpcId }}
          securityGroupId: ${{ parameters.securityGroupId }}
          env: ${{ parameters.env }}
          instanceClass: ${{ parameters.instanceClass }}
          storageSize: ${{ parameters.storageSize }}
          storageType: ${{ parameters.storageType }}
          subsetGroupName: ${{ parameters.subsetGroupName }}
          engineVersion: ${{ parameters.engineVersion }}
          publiclyAccessible: ${{ parameters.publiclyAccessible }}
          
    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    
      # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}

