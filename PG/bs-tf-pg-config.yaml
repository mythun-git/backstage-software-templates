apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: terraform-postgress
  title: Terraform Template for Postgres DB in AWS
  description: Postgress
spec:
  owner: mythun-git
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Enter the resource name
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the resource
          ui:autofocus: true
          ui:options:
            rows: 5
            
    - title: Fill Postgress DB Details
      required:
        - region
        - dbIdentifierName
        - databaseName
        - env
      properties:
        dbIdentifierName:
          title: Database Identification Name
          type: string
          description: Enter the Database Identification Name
          ui:autofocus: true
          ui:options:
            rows: 5

        region:
          title: AWS Region
          type: string
          description: The AWS region where the Postgress db will be deployed to
          enum:
            - us-east-1
            - us-east-2
            - us-west-1
            - us-west-2

        databaseName:
          title: Database Name
          type: string
          description: Enter the Database Name
          ui:options:
            rows: 5

        dbUserName:
          title: User Name
          type: string
          description: Enter the Database User Name
          ui:options:
            rows: 5

        dbPassword:
          title: User Name
          type: string
          description: Enter the Database User Name
          ui:options:
            rows: 5

        env:
          title: Environment
          type: string
          description: Environment
          enum:
            - Development
            - QA
            - Production
            
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          region: ${{ parameters.region }}
          dbIdentifierName: ${{ parameters.dbIdentifierName }}
          databaseName: ${{ parameters.databaseName }}
          dbUserName: ${{ parameters.dbUserName }}
          dbPassword: ${{ parameters.dbPassword }}
          env: ${{ parameters.env }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    
      # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}

