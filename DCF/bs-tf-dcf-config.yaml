apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: terraform-dcf
  title: Terraform Template for DFC
  description: Create DCF
spec:
  owner: mythun-git
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Enter the resource name
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the resource
          ui:autofocus: true
          ui:options:
            rows: 5
            
    - title: Fill in DFC Details
      required:
        - controllerIP
        - userName
        - password
      properties:
        controllerIP:
          title: Controller IP
          type: string
          description: Controller IP
          ui:autofocus: true
          ui:options:
            rows: 5
            
        userName:
          title: User Name
          type: string
          description: Enter the User Name

        password:
          title: Password
          type: string
          description: Enter the Password

    - title: Enter the DCF Policy Details
      required:
        - dfPolicyName1
        - action1
      properties:
        dfPolicyName1:
          title: Policy Name [1]
          type: string
          description: Enter Policy Name
          ui:autofocus: true
          ui:options:
            rows: 5
        action1:
          title: Policy Action [1]
          type: string
          description: Enter Policy Name
          enum:
            - PERMIT
            - DENY
        priority1:
          title: Policy Priority [1]
          type: string
          description: Enter Policy Priority
        protocol1:
          title: Policy Protocol [1]
          type: string
          description: Enter Policy Protocol
        
            
        dfPolicyName2:
          title: Policy Name [2]
          type: string
          description: Enter Policy Name
        action2:
          title: Policy Action [2]
          type: string
          description: Enter Policy Name
          enum:
            - PERMIT
            - DENY
        priority2:
          title: Policy Priority [2]
          type: string
          description: Enter Policy Priority
        protocol2:
          title: Policy Protocol [2]
          type: string
          description: Enter Policy Protocol
          
        sourceSmartGroup:
          title: Source Smart Group
          type: string
          description: Enter the Source Smart Group
        destinationSmartGroup:
          title: Destination Smart Group
          type: string
          description: Enter the Destination Smart Group
            
            
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          controllerIP: ${{ parameters.controllerIP }}
          userName: ${{ parameters.userName }}
          password: ${{ parameters.password }}
          dfPolicyName1: ${{ parameters.dfPolicyName1 }}
          action1: ${{ parameters.action1 }}
          priority1: ${{ parameters.priority1 }}
          protocol1: ${{ parameters.priority1 }}
          dfPolicyName2: ${{ parameters.dfPolicyName2 }}
          action2: ${{ parameters.action2 }}
          priority2: ${{ parameters.priority2 }}
          protocol2: ${{ parameters.priority2 }}
          sourceSmartGroup: ${{ parameters.sourceSmartGroup }}
          destinationSmartGroup: ${{ parameters.destinationSmartGroup }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
          # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
